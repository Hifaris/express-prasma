// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  role    Role     @default(USER)
  Profile Profile?
  Posts   Post[]
}

enum Role {
  USER
  ADMIN
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int     @unique @map("user_id")
}

model Post {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  publish   Boolean    @default(false)
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int        @map("author_id")
  category  Category[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String
  post Post[]
}

// model Post {
//   id            Int             @id @default(autoincrement())
//   title         String
//   createdAt     DateTime        @default(now()) @map("created_at")
//   updatedAt     DateTime        @updatedAt @map("updated_at")
//   publish       Boolean         @default(false)
//   author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   authorId      Int             @map("author_id")
//   category_post Category_Post[]
// }

// model Category_Post {
//   id         Int      @id @default(autoincrement())
//   post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
//   postId     Int      @map("post_id")
//   category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
//   categoryId Int      @map("category_id")
//   creatdAt DateTime @default(now()) @map("created_id")

//   @@map("category_Post ")
// }

// model Category {
//   id            Int             @id @default(autoincrement())
//   name          String
//   category_post Category_Post[]
// }
